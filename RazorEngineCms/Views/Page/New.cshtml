
@{
    ViewBag.Title = "New Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles {
    <script src="~/Scripts/codemirror.js" type="text/javascript"></script>
    <script src="~/Scripts/codemirror-mode/clike/clike.js" type="text/javascript"></script>
    <script src="~/Scripts/codemirror-mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
    <script src="~/Scripts/codemirror-mode/xml/xml.js" type="text/javascript"></script>
    <link rel="stylesheet" href="~/Content/codemirror.css" type="text/css" />
    <link rel="stylesheet" href="~/Content/codemirror-themes/material.css" type="text/css" />
}


<h2>New Page</h2>

<div class="row">
    <div class="col-xs-12">
        <form id="newPage" action="">
            <div class="form-group">
                <label for="pageName">Page Name</label>
                <input type="text" name="pageName" id="pageName" class="form-control" />
            </div>

            <div class="form-group">
                <label for="pageVar">Page Variable</label>
                <input type="text" name="pageVar" id="pageVar" class="form-control" />
            </div>

            <div class="form-group">
                <label for="model">Page Model</label>
                <p>Create an object variable named "Model" to pass .NET code to view</p>
                <textarea class="form-control" id="model" name="model"></textarea>
            </div>

            <div class="form-group">
                <label for="template">Page Template </label>
                <p>Access Page Model with Razor Syntax (e.g. @@Model.PropertyName)</p>
                <textarea class="form-control" id="template" name="template"></textarea>
            </div>

            <div class="form-group">
                <input type="submit" class="btn btn-default" id="submitNewPage" />
            </div>
        </form>
    </div>
</div>

@section Scripts { 
<script type="text/javascript">
    // onload jquery events (events only attached if page object exists else user notifed of error) 
    $(function () {
        if (page == undefined) {
            logger.logError("Page object could not be initialized! JS error may have prevented page object from being created.")
            alert("Unexpected error. Please try refreshing the page.");
            return;
        }
        $("#submitNewPage").click(function (e) {
            e.preventDefault();
            page.save();
        });
        // clears errors after an input field has been updated 
        var fields = ["#pageName", "#pageVar", "#model", "#template"]
        for (var i = 0, inputField; inputField = fields[i++];) {
            _default.updateInputField(inputField);
        }
    });
    // setup code mirror editors 
    var pageModelEditor = CodeMirror.fromTextArea(document.getElementById("model"), {
        lineNumbers: true,
        matchBrackets: true,
        mode: "text/x-csharp",
        theme: "material"
    });
    var pageTemplateEditor = CodeMirror.fromTextArea(document.getElementById("template"), {
        lineNumbers: true,
        matchBrackets: true,
        mode: "xml",
        theme: "material"
    });
    pageModelEditor.setSize("100%", "80%")
    // page object for validating and submitting a new page request 
    var page = page || {};
    // sets object properties with form values
    page.init = function () {
        this.name = $("#pageName").val() != undefined ? $("#pageName").val().trim() : "",
        this.$name = $("#pageName"),
        this.variable = $("#pageVar").val() != undefined ? $("#pageVar").val().trim() : "",
        this.$variable = $("#pageVar"),
        this.$model = $("#model"),
        this.$template = $("#template"),
        page.template = pageTemplateEditor.getValue().trim(),
        page.model = pageModelEditor.getValue().trim()
    };
    // validates new page form inputs and returns true if valid 
    page.validate = function () {
        var isValid = true;
        if (this.name === null || this.name.length === 0) {
            this.$name.addError("Name cannot be empty", "name");
            isValid = false;
        }
        else if (this.name.indexOf(" ") > -1) {
            this.$name.add("Name cannot contain a space");
            isValid = false;
        }
        if (this.variable != null && this.variable.indexOf(" ") > -1) {
            this.$variable.add("Name cannot contain a space");
            isValid = false;
        }
        if (this.template === null || this.template.length === 0) {
            this.$template.addError("Template cannot be empty", "template");
            isValid = false;
        }
        if (this.model != null && this.model.indexOf("); DROP TABLE") > -1 || this.model.indexOf("DROP TABLE") > -1) {
            this.$model.addError("SQL injetion detected", "model");
            isValid = false;
        }
        return isValid; 
    }
    // calls page.validate() then saves page
    page.save = function () {
        this.init();
        _default.clearErrors();
        if (this.validate()) {
            var scopedObject = this;
            // create page object model for post request 
            var pageModel = {
                Name: scopedObject.name,
                Variable: scopedObject.variable,
                Model: scopedObject.model,
                Template: scopedObject.template
            };
            // set params for ajax request 
            var settings = {
                type: "POST",
                contentType: "application/json",
                url: "/Page/New",
                data: JSON.stringify(pageModel),
                success: function (data) {
                    console.log(data);
                }
            };
            // submit post request 
            $.ajax(settings);
        } // end if valid request 
        return;
    };
</script>
}